import matplotlib.pyplot as plt
import numpy as np

import distDF as ddf
import riskMeasure as rm

s1a1 = ddf.distribution(X=np.array([-300, 300]), p=np.array([0.25, 0.75]))
s1a2 = ddf.distribution(X=np.array([0]), p=np.array([1.0]))
s1a3 = ddf.distribution(X=np.array([-50, 250]), p=np.array([0.5, 0.5]))
s2 = ddf.distribution(X=np.array([100]), p=np.array([1.0]))
Lambda = np.linspace(0, 1, 1001)

test = ddf.distribution(X=np.array([0, 1, 2]), p=np.array([0.2, 0.3, 0.5]))
testEVaR = ddf.EVaR(test, Lambda)
plt.plot(Lambda, testEVaR, "r-.", label="ori")
plt.plot(Lambda, (-0.2 + Lambda) / 1.0, "k-.", label="line")
plt.plot(Lambda, -0.25 + (Lambda) / 0.8, "k-.", label="line")
plt.show()

# Get s1 EVaR Values for each action and get the max of the EVaR values
s1a1EVaR = ddf.EVaR(s1a1, Lambda)
s1a1CVaR = ddf.CVaR(s1a1, Lambda)
s1a2EVaR = ddf.EVaR(s1a2, Lambda)
s1a2CVaR = ddf.CVaR(s1a2, Lambda)
s1a3EVaR = ddf.EVaR(s1a3, Lambda)
s1a3CVaR = ddf.CVaR(s1a3, Lambda)
s1maxEVaR = np.maximum.reduce([s1a1EVaR, s1a2EVaR, s1a3EVaR])
s1maxCVaR = np.maximum.reduce([s1a1CVaR, s1a2CVaR, s1a3CVaR])
s1maxNi = ddf.CVaR2D(s1maxCVaR, Lambda)

# EVaR s1 plot
# plt.plot(Lambda, s1maxEVaR, "k--", label="max_a", linewidth=2.5)
plt.plot(Lambda, s1a1EVaR, "r-", label="a1")
plt.plot(Lambda, s1a2EVaR, "b-", label="a2")
plt.plot(Lambda, s1a3EVaR, "g-", label="a3")
plt.title("s1 EVaR value")
plt.ylabel("EVaR Value")
plt.xlabel("α")
plt.legend(loc="lower right")
plt.show()
# Ni's EVaR s1 plot
plt.plot(Lambda, s1maxCVaR, "k--", label="max_a", linewidth=2.5)
plt.plot(Lambda, s1a1CVaR, "r-", label="a1")
plt.plot(Lambda, s1a2CVaR, "b-", label="a2")
plt.plot(Lambda, s1a3CVaR, "g-", label="a3")
plt.title("s1 Ni's EVaR value")
plt.ylabel("EVaR Value")
plt.xlabel("α")
plt.legend(loc="lower right")
plt.show()
# Joining s1 and s2 distribution
jointExp = ddf.joinD([ddf.condD(df.X, df.p, 0.5) for df in [s1maxNi, s2]])
jointa1 = ddf.joinD([ddf.condD(df.X, df.p, 0.5) for df in [s1a1, s2]])
jointa2 = ddf.joinD([ddf.condD(df.X, df.p, 0.5) for df in [s1a2, s2]])
jointa3 = ddf.joinD([ddf.condD(df.X, df.p, 0.5) for df in [s1a3, s2]])
jointExpectedNi = ddf.CVaR(jointExp, Lambda)
jointa1EVaR = ddf.EVaR(jointa1, Lambda)
jointa2EVaR = ddf.EVaR(jointa2, Lambda)
jointa3EVaR = ddf.EVaR(jointa3, Lambda)
jointDeployNi = np.maximum(jointa1EVaR, jointa2EVaR)
jointoptEVaR = np.maximum.reduce([jointa1EVaR, jointa2EVaR, jointa3EVaR])
# join EVaR plot
plt.plot(Lambda, jointExpectedNi, "k--", label="Expect", linewidth=2.5)
plt.plot(Lambda, jointa1EVaR, "r-", label="a1")
plt.plot(Lambda, jointa2EVaR, "b-", label="a2")
plt.plot(Lambda, jointa3EVaR, "g-", label="a3")
plt.title("join EVaR value")
plt.ylabel("EVaR Value")
plt.xlabel("α")
plt.legend(loc="upper left")
plt.show()
# join EVaR plot performance plot
plt.plot(Lambda, jointExpectedNi, "k--", label="Expect", linewidth=2.5)
plt.plot(Lambda, jointoptEVaR, "g-", label="True Opt")
plt.plot(Lambda, jointDeployNi, "r-.", label="a2")
plt.title("join EVaR performance plot")
plt.ylabel("EVaR Value")
plt.xlabel("α")
plt.legend(loc="upper left")
plt.show()
